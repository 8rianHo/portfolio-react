{"version":3,"sources":["images/brian.jpg","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","StyledContainer","styled","Container","StyledGridColumn","Grid","Column","StyledProfileImage","Image","StyledLink","a","About","columns","divided","Row","src","profileImg","size","circular","Item","Group","Content","Header","Meta","Description","Portfolio","otherPanels","key","title","content","mobilePanels","webPanels","StyledButtonDiv","Button","color","href","target","topicPanels","icon","StyledAccordion","Accordion","panels","defaultActiveIndex","div","App","Menu","fixed","inverted","header","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2d9327a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brian.d78e53a8.jpg\";","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  Image,\n  Menu,\n  Item,\n  Accordion,\n  Button\n} from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport profileImg from \"./images/brian.jpg\";\n\nconst App: React.FC = () => (\n  <>\n    <Menu fixed=\"top\" inverted>\n      <Container>\n        <Menu.Item header>brian</Menu.Item>\n        {/* <Menu.Item as=\"a\">about</Menu.Item>\n        <Menu.Item as=\"a\">portfolio</Menu.Item> */}\n      </Container>\n    </Menu>\n\n    <StyledContainer text>\n      <>\n        <About />\n      </>\n      <>\n        <Portfolio />\n      </>\n    </StyledContainer>\n  </>\n);\n\nconst StyledContainer = styled(Container)`\n  &&&& {\n    margin-top: 7em;\n    margin-bottom: 5em;\n    max-width: 80% !important;\n\n    @media (max-width: 48em) {\n      margin-bottom: 0;\n      max-width: 100% !important;\n    }\n  }\n`;\n\nconst StyledGridColumn = styled(Grid.Column)`\n  &&&&&& {\n    text-align: -webkit-center;\n  }\n`;\n\nconst StyledProfileImage = styled(Image)`\n  &&& {\n    @media (max-width: 48em) {\n      width: 200px;\n    }\n  }\n`;\n\nconst StyledLink = styled.a`\n  text-decoration: none;\n  color: inherit;\n  :hover {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nconst About: React.FC = () => {\n  return (\n    <Grid columns={1} divided>\n      <Grid.Row>\n        <StyledGridColumn>\n          <StyledProfileImage src={profileImg} size=\"medium\" circular />\n        </StyledGridColumn>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column>\n          <Item.Group>\n            <Item>\n              <Item.Content>\n                <Item.Header>Brian Ho</Item.Header>\n                <Item.Meta>Front End Developer | London</Item.Meta>\n                <Item.Description>\n                  Brian's career initially started with a three year bachelor's\n                  degree in Biomedical Sciences. After a year out of travelling\n                  and coding in his spare time, he completed a Masters in\n                  Computer Science and has been confidently building his skills\n                  and experience within the tech industry.\n                </Item.Description>\n                <Item.Description>\n                  Brian has commerical experience in web scraping, product\n                  marketing/affiliate feeds, and single-page applications from\n                  his first developer role. Currently, he is learning his trade\n                  at a global consultancy working on large industry scale\n                  applications in Retail, Pharmacy and Finance sectors.\n                </Item.Description>\n                <Item.Description>\n                  Comfortable with React, TypeScript, Redux and GraphQL, Brian\n                  is in the process of transitioning to full stack by actively\n                  working with NodeJS, Express and a host of AWS services.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nconst Portfolio: React.FC = () => {\n  const otherPanels = [\n    {\n      key: \"other-panel-a\",\n      title: \"Blockchain Demo\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A basic demonstration on how the blockchain works. Creation of\n                  a genesis block is followed by multiple blocks, linked\n                  together via their unique hashes.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    }\n  ];\n  const mobilePanels = [\n    {\n      key: \"mobile-panel-a\",\n      title: \"OurBucket\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A proof of concept for a shared to-do list app idea. The idea\n                  was to have a community of friends with shared \"bucket lists\"\n                  they would try to complete together. You could be in a\n                  relationship bucket but also multiple friend buckets, and earn\n                  points on each activity completed. My first experience with\n                  Swift, Xcode, Firebase and Sketch.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    },\n    {\n      key: \"mobile-panel-b\",\n      title: \"Pok√®mon Rock, Paper, Scissors\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A challenge I set myself: To upload a game to the App Store. I\n                  decided on Rock PaperScissors based on the classic pokemon\n                  battle theme. This was coded completely in Swift 3 using\n                  Xcode. I learnt about the pros and cons of uploading to the\n                  App Store (*cough trademark strikes cough*). I think it peaked\n                  at ten downloads by friends and family so it was a win-win all\n                  around.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    },\n    {\n      key: \"mobile-panel-c\",\n      title: \"iPhone Calculator\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  Taught myself the basics of Swift and decided to clone the\n                  iPhone calculator as a challenge. The logic of a basic\n                  calculator was coded in Swift but most of the time was spent\n                  on Xcode UI views trying to replicate the default calculator\n                  as closely as possible.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    }\n  ];\n\n  const webPanels = [\n    {\n      key: \"web-panel-a\",\n      title: \"Portfolio\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A university course module organiser, with the purpose of\n                  matching real world clients with uni students to create a\n                  mobile application. Client allocation and monitoring of the\n                  course over twelve weeks was originally managed off of\n                  spreadsheets / google docs. I created a web application for\n                  all users of the module as a new central hub for information.\n                  The module organiser can allocate students to clients.\n                  Teaching assistants can record group progress and students can\n                  see their marks. Front end is predominantly JavaScript /\n                  jQuery / AJAX. The visuals provided by bootstrap. Backend is\n                  PHP connected to a MySQL database.\n                  <StyledButtonDiv>\n                    <Button color=\"teal\">\n                      <StyledLink\n                        href=\"https://8rianho.github.io/portfolio/\"\n                        target=\"_blank\"\n                      >\n                        View\n                      </StyledLink>\n                    </Button>\n                  </StyledButtonDiv>\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    },\n    {\n      key: \"web-panel-b\",\n      title: \"Youtube.min\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A minimalist's Youtube. Search for a video or channel, select\n                  and then watch. No video autoplay, recommended videos,\n                  comments or statistics. Just watch the video(s) and get on\n                  with your day.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    },\n    {\n      key: \"web-panel-c\",\n      title: \"Photo Face Detector\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A login system and SPA to upload photos and recognise faces\n                  within them using a smart public API called Clarafai. The\n                  login and number of photos uploaded to the page is recorded\n                  and stored in a PostgreSQL database. Provided brief\n                  introduction to deploying on Heroku too.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    },\n    {\n      key: \"web-panel-d\",\n      title: \"UCL Industry Exchange Network\",\n      content: {\n        content: (\n          <Item.Group>\n            <Item>\n              {/* <Item.Image size=\"tiny\" src={backgroundImg} /> */}\n\n              <Item.Content>\n                <Item.Description>\n                  A university course module organiser, with the purpose of\n                  matching real world clients with uni students to create a\n                  mobile application. Client allocation and monitoring of the\n                  course over twelve weeks was originally managed off of\n                  spreadsheets / google docs. I created a web application for\n                  all users of the module as a new central hub for information.\n                  The module organiser can allocate students to clients.\n                  Teaching assistants can record group progress and students can\n                  see their marks. Front end is predominantly JavaScript /\n                  jQuery / AJAX. The visuals provided by bootstrap. Backend is\n                  PHP connected to a MySQL database.\n                </Item.Description>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        )\n      }\n    }\n  ];\n\n  const topicPanels = [\n    {\n      key: \"web-panel\",\n      title: {\n        content: \" Web\",\n        icon: \"desktop\"\n      },\n      content: {\n        content: (\n          <div>\n            <StyledAccordion.Accordion\n              panels={webPanels}\n            ></StyledAccordion.Accordion>\n          </div>\n        )\n      }\n    },\n    {\n      key: \"mobile-panel\",\n      title: {\n        content: \" Mobile\",\n        icon: \"mobile alternate\"\n      },\n      content: {\n        content: (\n          <div>\n            <StyledAccordion.Accordion\n              panels={mobilePanels}\n            ></StyledAccordion.Accordion>\n          </div>\n        )\n      }\n    },\n    {\n      key: \"other-panel\",\n      title: {\n        content: \" Misc\",\n        icon: \"question circle\"\n      },\n      content: {\n        content: (\n          <div>\n            <StyledAccordion.Accordion\n              panels={otherPanels}\n            ></StyledAccordion.Accordion>\n          </div>\n        )\n      }\n    }\n  ];\n\n  return <StyledAccordion defaultActiveIndex={0} panels={topicPanels} styled />;\n};\n\nconst StyledAccordion = styled(Accordion)`\n  &&& {\n    border-radius: 0;\n    width: 100%;\n    margin-top: 5rem;\n    @media (max-width: 48em) {\n      margin-top: 2rem;\n      margin-bottom: 2rem;\n    }\n  }\n`;\n\nconst StyledButtonDiv = styled.div`\n  text-align: right;\n  margin-top: 1em;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}